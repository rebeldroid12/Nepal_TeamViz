fatal
ev <-as.vector(names(fatal1$FATALITIES))
EV
ev
ev <-names(fatal1$FATALITIES)
ev
names(fatal1$FATALITIES)
levels(fatal1$FATALITIES)
level(fatal1$FATALITIES)
factor(fatal1$FATALITIES)
factor(fatal1$EVTYPE)
levels(fatal1$EVTYPE)
qplot(levels(fatal1$EVTYPE),data=desc_fatal,weight=fatality,goem="bar",binwidth=1,ylab="number of fatalities",xlab="weather type")+theme(axis.text.x = element_text(angle = 90, hjust = 1))
g<-levels(fatal1$EVTYPE)
g
qplot(g,data=desc_fatal,weight=fatality,goem="bar",binwidth=1,ylab="number of fatalities",xlab="weather type")+theme(axis.text.x = element_text(angle = 90, hjust = 1))
length(g)
length(EVTYPE)
fatal <- aggregate(FATALITIES ~ EVTYPE, data = health, FUN = sum)
order_fatal<-fatal[order(-fatal$FATALITIES), ][1:20, ]
qplot(g,data=order_fatal)
order_fatal
fatal<-tapply(storm$FATALITIES,storm$EVTYPE,sum)
EVTYPE<-as.vector(names(fatal))
fatality<-as.vector(fatal)
fatal<-data.frame(EVTYPE,fatality)
desc_fatal<-fatal[order(-fatal$fatality), ][1:15, ]
qplot(EVTYPE,data=desc_fatal,weight=fatality,goem="bar",binwidth=1,ylab="number of fatalities",xlab="weather type")+theme(axis.text.x = element_text(angle = 45, hjust = 1))
type(EVTYPE)
str(EVTYPE)
str(g)
desc_fatal
order_fatal
qplot(g,data=order_fatal,goem="bar",binwidth=1,ylab="# of Fatalities",xlab="Event Type")+theme(axis.text.x = element_text(angle = 90, hjust = 1))
qplot(EVTYPE,data=order_fatal,goem="bar",binwidth=1,ylab="# of Fatalities",xlab="Event Type")+theme(axis.text.x = element_text(angle = 90, hjust = 1))
fatality
fatal1$FATALITIES
fatal <- aggregate(FATALITIES ~ EVTYPE, data = health, FUN = sum)
order_fatal<-fatal[order(-fatal$FATALITIES), ][1:20, ]
qplot(g,data=order_fatal, weight = fatal$FATALITIES, goem="bar",binwidth=1,ylab="# of Fatalities",xlab="Event Type")+theme(axis.text.x = element_text(angle = 90, hjust = 1))
str(fatality)
str(fatal1$FATALITIES)
fatal<-tapply(storm$FATALITIES,storm$EVTYPE,sum)
EVTYPE<-as.vector(names(fatal))
fatality<-as.vector(fatal)
fatal<-data.frame(EVTYPE,fatality)
desc_fatal<-fatal[order(-fatal$fatality), ][1:15, ]
qplot(EVTYPE,data=desc_fatal,weight=fatality,goem="bar",binwidth=1,ylab="number of fatalities",xlab="weather type")+theme(axis.text.x = element_text(angle = 45, hjust = 1))
names(fatal)
fatal<-tapply(storm$FATALITIES,storm$EVTYPE,sum)
names(fatal)
names(fatal1$EVTYPE)
levels(fatal1$EVTYPE)
g<-as.vector(levels(fatal$EVTYPE))
g<-as.vector(levels(fatal1$EVTYPE))
g
qplot(g,data=order_fatal, weight = fatal1$FATALITIES, goem="bar",binwidth=1,ylab="# of Fatalities",xlab="Event Type")+theme(axis.text.x = element_text(angle = 90, hjust = 1))
order_fatal
barplot(order_fatal)
qplot(g,data=order_fatal, weight = fatal1$FATALITIES, geom="bar",binwidth=1,ylab="# of Fatalities",xlab="Event Type")+theme(axis.text.x = element_text(angle = 90, hjust = 1))
?qplot
?qplot
qplot
fatal<-tapply(storm$FATALITIES,storm$EVTYPE,sum)
EVTYPE<-as.vector(names(fatal))
fatality<-as.vector(fatal)
fatal<-data.frame(EVTYPE,fatality)
desc_fatal<-fatal[order(-fatal$fatality), ][1:15, ]
qplot(EVTYPE,data=desc_fatal,weight=fatality,goem="bar",binwidth=1,ylab="number of fatalities",xlab="weather type")+theme(axis.text.x = element_text(angle = 45, hjust = 1))
qplot(g,data=order_fatal, weight = as.vector(fatal1$FATALITIES), geom="bar",binwidth=1,ylab="# of Fatalities",xlab="Event Type")+theme(axis.text.x = element_text(angle = 90, hjust = 1))
str(order_fatal)
str(desc_fatal)
str(g)
totalHealth <- group_by(health, EVTYPE) %>%
summarise(totalFatalities=sum(FATALITIES),totalInjuries=sum(INJURIES))
install.packages('reshape')
install.packages('reshape2')
install.packages("reshape2")
library(reshape2)
totalHealth <- group_by(health, EVTYPE) %>%
summarise(totalFatalities=sum(FATALITIES),totalInjuries=sum(INJURIES))
injury <- aggregate(INJURIES ~ EVTYPE, data = health, FUN = sum)
order_injury<-injury[order(-injury$INJURIES), ][1:20, ]
injury
totalHealth <- merge(injury,fatal1, by='EVTYPE')
totalHealth
str(totalHealth)
totalHealth$INJURIES + totalHealth$FATALITIES
totalHealth$tot <-totalHealth$INJURIES + totalHealth$FATALITIES
head(totalHealth)
totalHealth
summary(totalHealth)
totSummary <- subset(totalHealth, tot >= quantile(tot,0.9))
totSummary
nrow(totSummary)
order_totSummary <-totSummary[order(-totSummary$tot),][1:20,]
ordered_totSummary
order_totSummary
melt(totSummary, id.vars="EVTYPE")
?melt
head(melt(totSummary, id.vars="EVTYPE"))
meltTot<- melt(totSummary,id.vars='EVTYPE')
meltTot
head(meltTot)
notot<-  select(totalHealth, -tot)
meltTot<- melt(notot,id.vars='EVTYPE')
keeps <- c("INJURIES","FATALITIES")
notot<-order_totSummary[keeps]
meltTot<- melt(notot,id.vars='EVTYPE')
notot
head(notot)
keeps <- c("EVTYPE",INJURIES","FATALITIES")
notot<-order_totSummary[keeps]
meltTot<- melt(notot,id.vars='EVTYPE')
head(order_totSummary)
f<-order_totSummary[,!'tot']
f<-order_totSummary[,!c('tot')]
f<-order_totSummary[,!('tot')]
f<-order_totSummary[,!(names(order_totSummary) %in% 'tot')]
f
head(f)
meltTot<- melt(noTot,id.vars='EVTYPE')
noTot <- <-order_totSummary[,!(names(order_totSummary) %in% 'tot')]
noTot <-order_totSummary[,!(names(order_totSummary) %in% 'tot')]
meltTot<- melt(noTot,id.vars='EVTYPE')
head(meltTot)
nrow(meltTot)
totalHealth
head(totalHealth)
ggplot(meltTot, aes(x=EVTYPE, y=value, fill=variable)) +
geom_bar(stat='identity') +
scale_fill_discrete(name="Harm to population",
breaks=c("FATALITIES","INJURIES"),
labels=c("FATALITIES","INJURIES")) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(y="Number of Human Fatalities/Injuries") +
labs(x="Event Types") +
labs(title="Top 20 Most Harmful Event Types to Human Population ")
str(meltTot)
ggplot(order_injury)
ggplot(order_injury, x=EVTYPE, y=)
head(order_injury)
ggplot(order_injury, x=EVTYPE, y=INJURIES)
ggplot(order_injury, aes(x=EVTYPE, y=INJURIES))
ggplot(order_injury, aes(x=EVTYPE, y=INJURIES))+geom_bar(stat='identity')
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(y="Number of Human Fatalities/Injuries") +
labs(x="Event Types") +
labs(title="Top 20 Most Harmful Event Types to Human Population ")
ggplot(order_injury, aes(x=EVTYPE, y=INJURIES))+geom_bar(stat='identity') + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(y="Number of Human Fatalities/Injuries") +
labs(x="Event Types") +
labs(title="Top 20 Most Harmful Event Types to Human Population ")
ggplot(order_injury, aes(x=EVTYPE, y=INJURIES, fill=variable))+geom_bar(stat='identity') + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(y="Number of Human Fatalities/Injuries") +
labs(x="Event Types") +
labs(title="Top 20 Most Harmful Event Types to Human Population ")
ggplot(order_injury, aes(x=EVTYPE, y=INJURIES, fill='blue'))+geom_bar(stat='identity') + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(y="Number of Human Fatalities/Injuries") +
labs(x="Event Types") +
labs(title="Top 20 Most Harmful Event Types to Human Population ")
ggplot(order_injury, aes(x=EVTYPE, y=INJURIES, coloyr='blue'))+geom_bar(stat='identity') + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(y="Number of Human Fatalities/Injuries") +
labs(x="Event Types") +
labs(title="Top 20 Most Harmful Event Types to Human Population ")
ggplot(order_injury, aes(x=EVTYPE, y=INJURIES, colour='blue'))+geom_bar(stat='identity') + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(y="Number of Human Fatalities/Injuries") +
labs(x="Event Types") +
labs(title="Top 20 Most Harmful Event Types to Human Population ")
ggplot(order_fatal, aes(x=EVTYPE, y=FATALITIES))+geom_bar(stat='identity') + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
+     labs(y="Number of Human Fatalities") +
+     labs(x="Event Types") +
+     labs(title="Top 20 Most Harmful Event Types to Human Population: Fatalities ")
ggplot(order_injury, aes(x=EVTYPE, y=INJURIES))+geom_bar(stat='identity') + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
+     labs(y="Number of Human Injuries") +
+     labs(x="Event Types") +
+     labs(title="Top 20 Most Harmful Event Types to Human Population: Injuries ")
ggplot(order_injury, aes(x=EVTYPE, y=INJURIES))+geom_bar(stat='identity') + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(y="Number of Human Fatalities/Injuries") +
labs(x="Event Types") +
labs(title="Top 20 Most Harmful Event Types to Human Population ")
ggplot(order_injury, aes(x=EVTYPE, y=INJURIES))+geom_bar(stat='identity') + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
+     labs(y="Number of Human Fatalities/Injuries") +
+     labs(x="Event Types") +
+     labs(title="Top 20 Most Harmful Event Types to Human Population ")
ggplot(order_fatal, aes(x=EVTYPE, y=FATALITIES))+geom_bar(stat='identity') + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +   labs(y="Number of Human Fatalities") +  labs(x="Event Types") +  labs(title="Top 20 Most Harmful Event Types to Human Population: Fatalities ")
ggplot(order_injury, aes(x=EVTYPE, y=INJURIES))+geom_bar(stat='identity') + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +  labs(y="Number of Human Injuries") +   labs(x="Event Types") + labs(title="Top 20 Most Harmful Event Types to Human Population: Injuries ")
install.packages('ggplot2')
library(ggplot2)
storm <- read.csv('/home/rebeldroid12/RR_PA2/repdata-data-StormData.csv', header=T)
install.packages('manipulate')
library(manipulate)
myHist<-function(mu){
hist(galton$child,col='blue', breaks=100)
lines(c(mu,mu),c(0,150), col='red',lwd=5)
mse<-mean((galton$child - mu)^2)
text(63,150,paste('mu = ',mu))
text(63,140,paste('MSE = ', round(mse,2)))
}
manipulate(myHist(mu),mu = slider(62, 74, step=0.5))
library(data)
install.packages('dataa')
install.packages('data')
install.packages('Galton')
install.packages('HistData')
install.packages('UsingR')
library(UsingR)
manipulate(myHist(mu),mu = slider(62, 74, step=0.5))
install.packages("classInt")
library(classInt)
library('classInt')
library("classInt")
library()
install.packages('classInt')
library("classInt")
library('classInt')
library(classInt)
library(classInt)
library('classInt')
install.packages('maptools')
library(maptools)
#install gdal
install.packages('rgdal')
library(rgdal)
install.packages('RColorBrewer')
library(RColorBrewer)
install.packages("sp")
library(sp)
classIntervals <- function(var, n, style="quantile", rtimes=3, ..., intervalClosure=c("left", "right"), dataPrecision=NULL) {
if (is.factor(var)) stop("var is categorical")
if (!is.numeric(var)) stop("var is not numeric") }
setwd('/home/rebeldroid12/Nepal_TeamViz')
#shapefiles
districts = readShapeSpatial('npl_polbnda_adm3_dis_25k_50k_sdn_wgs84/npl_polbnda_adm3_dis_25k_50k_sdn_wgs84.shp')
vdcs = readShapeSpatial('npl_polbnda_adm4_vdc_25k_50k_sdn_wgs84/npl_polbnda_adm4_vdc_25k_50k_sdn_wgs84.shp')
install.packages('maptools')
library(maptools)
#install gdal
install.packages('rgdal')
library(rgdal)
install.packages('RColorBrewer')
library(RColorBrewer)
#shapefiles
districts = readShapeSpatial('npl_polbnda_adm3_dis_25k_50k_sdn_wgs84/npl_polbnda_adm3_dis_25k_50k_sdn_wgs84.shp')
vdcs = readShapeSpatial('npl_polbnda_adm4_vdc_25k_50k_sdn_wgs84/npl_polbnda_adm4_vdc_25k_50k_sdn_wgs84.shp')
#calculated vars
districts_var = read.csv('score_dist_final_20150616.csv', sep = ',', header=TRUE)
vdcs_var = read.csv('score_vdc_final_20150616.csv', sep = ',', header=TRUE)
dist_shp =  readOGR(dsn="./npl_polbnda_adm3_dis_25k_50k_sdn_wgs84",layer="npl_polbnda_adm3_dis_25k_50k_sdn_wgs84")
dist_shp.df <- as(dist_shp, "data.frame")
typeof(dist_shp)
typeof(dist_shp.df)
dist_shp.shp =  writeOGR(dsn="./npl_polbnda_adm3_dis_25k_50k_sdn_wgs84",layer="npl_polbnda_adm3_dis_25k_50k_sdn_wgs84",driver="ESRI Shapefile")
dist_shp.shp =  writeOGR(dist_shp.df,dsn="./npl_polbnda_adm3_dis_25k_50k_sdn_wgs84",layer="npl_polbnda_adm3_dis_25k_50k_sdn_wgs84",driver="ESRI Shapefile")
dist_shp.shp =  writeOGR(dist_shp,dsn="./npl_polbnda_adm3_dis_25k_50k_sdn_wgs84",layer="npl_polbnda_adm3_dis_25k_50k_sdn_wgs84",driver="ESRI Shapefile")
dist_shp.shp =  writeOGR(dist_shp,dsn="./npl_polbnda_adm3_dis_25k_50k_sdn_wgs84",layer="npl_polbnda_adm3_dis_25k_50k_sdn_wgs84-2",driver="ESRI Shapefile")
plot(dist_shp.shp)
typeof(dist_shp.shp)
install.packages('maptools')
library(maptools)
#install gdal
install.packages('rgdal')
library(rgdal)
install.packages('RColorBrewer')
library(RColorBrewer)
install.packages("maptools")
library(maptools)
#install gdal
install.packages('rgdal')
library(rgdal)
install.packages('RColorBrewer')
library(RColorBrewer)
classIntervals <- function(var, n, style="quantile", rtimes=3, ..., intervalClosure=c("left", "right"), dataPrecision=NULL) {
if (is.factor(var)) stop("var is categorical")
if (!is.numeric(var)) stop("var is not numeric") }
setwd('/home/rebeldroid12/Nepal_TeamViz')
#shapefiles
districts = readShapeSpatial('npl_polbnda_adm3_dis_25k_50k_sdn_wgs84/npl_polbnda_adm3_dis_25k_50k_sdn_wgs84.shp')
vdcs = readShapeSpatial('npl_polbnda_adm4_vdc_25k_50k_sdn_wgs84/npl_polbnda_adm4_vdc_25k_50k_sdn_wgs84.shp')
#calculated vars
districts_var = read.csv('score_dist_final_20150616.csv', sep = ',', header=TRUE)
vdcs_var = read.csv('score_vdc_final_20150616.csv', sep = ',', header=TRUE)
districts@data
attributes(districts@data)
typeof(districts)
attributes(districts_var)
levels(districts_var$injured)
typeof(districts_var$injured)
typeof(districts_var$total_population)
mergedDist <- merge(districts@data, districts_var, by.x="DIST_ID", by.y="dist_id")
plot(districts, col=gray(mergedDist$death/max(mergeDist$death)))
plot(districts, col=gray(mergedDist$death/max(mergedDist$death)))
#create color breaks (9)
brks<-classIntervals(mergedDist$deaths, n=9, style="quantile")
brks<- brks$brks
plot(districts, col=colors[findInterval(mergedDist$death, brks,all.inside=TRUE)], axes=F)
setwd('/home/rebeldroid12/Desktop/swb/test/rem_spatial_research')
install.packages('maptools')
install.packages('rgdal')
library(maptools)
library('rgdal')
install.packages("maptools")
g = readShapeSpatial('chiphi.shp')
setwd('/home/rebeldroid12/Nepal_TeamViz')
districts = readShapeSpatial('merged_dists/full_dist_merged_data.shp')
brks<-classIntervals(districts$deaths, n=9, style="quantile")
brks<- brks$brks
names(districts)
names(districts_var)
districts$total_pop = as.numeric(districts$total_population)
classIntervals <- function(var, n, style="quantile", rtimes=3, ..., intervalClosure=c("left", "right"), dataPrecision=NULL) {
if (is.factor(var)) stop("var is categorical")
if (!is.numeric(var)) stop("var is not numeric") }
setwd('/home/rebeldroid12/Nepal_TeamViz')
districts = readShapeSpatial('merged_dists/full_dist_merged_data.shp')
districts = readShapeSpatial('merged_data/districts/full_dist_merged_data.shp')
name(districts)
names(districts)
districts$total_pop = as.numeric(districts$score_dist)
names(districts)
districts$obs_death = as.numeric(districts$score_di_1)
districts$obs_injured = as.numeric(districts$score_di_2)
districts$obs_mmi_max_dist = as.numeric(districts$score_di_3)
districts$obs_casualty = as.numeric(districts$score_di_4)
districts$pred_death = as.numeric(districts$score_di_5)
districts$pred_rate = as.numeric(districts$score_di_6)
districts$pred_density = as.numeric(districts$score_di_7)
districts$index_cnt = as.numeric(districts$score_di_8)
districts$index_rate = as.numeric(districts$score_di_9)
districts$index_density = as.numeric(districts$score_di_10)
districts$wpredicted = as.numeric(districts$score_di_11)
districts$index_roof = as.numeric(districts$score_di_12)
districts$index_wall = as.numeric(districts$score_di_13)
names(districts)
districts$index_density = as.numeric(districts$score_di10)
districts$wpredicted = as.numeric(districts$score_di11)
districts$index_roof = as.numeric(districts$score_di12)
districts$index_wall = as.numeric(districts$score_di13)
brks<-classIntervals(districts$obs_deaths, n=9, style="quantile")
brks<- brks$brks
typeof(districts$obs_death)
is.numeric(districts$obs_death)
brks<-classIntervals(districts$obs_death, n=9, style="quantile")
brks<- brks$brks
plot(districts, col=colors[findInterval(district$obs_death, brks,all.inside=TRUE)], axes=F)
plot(districts, col=colors[findInterval(districts$obs_death, brks,all.inside=TRUE)], axes=F)
levels(district$obs_death)
levels(districts$obs_death)
factors(districts$obs_death)
unique(districts$obs_death)
districts_var = read.csv('score_dist_final_20150616.csv', sep = ',', header=TRUE)
names(districts_var)
unique(districts_var$deaths)
unique(districts_var$casualty)
unique(districts_var$injured)
districts$obs_death[is.na(districts$obs_death)] <- 0
unique(districts$obs_death)
brks<-classIntervals(districts$obs_deaths, n=9, style="quantile")
brks<- brks$brks
is.numeric(districts$obs_death)
if (!is.numeric(districts$obs_death)) stop ('var not num')
if (is.numeric(districts$obs_death)) stop ('var not num')
brks<-classIntervals(districts$obs_deaths, n=9, style="quantile")
classIntervals <- function(var, n, style="quantile", rtimes=3, ..., intervalClosure=c("left", "right"), dataPrecision=NULL) {
if (is.factor(var)) stop("var is categorical")
}
brks<-classIntervals(districts$obs_deaths, n=9, style="quantile")
brks<- brks$brks
plot(districts, col=colors[findInterval(districts$obs_death, brks,all.inside=TRUE)], axes=F)
is.na(districts$obs_death)
is.numeric(districts$obs_death)
is.na(districts$DIST_ID)
plot(districts, col=colors[findInterval(districts$obs_death, brks,all.inside=TRUE)], axes=F)
is.na(districts)
names(districts)
districts$obs_injured[is.na(districts$obs_injured)] <- 0
districts$obs_mmi_max_dist[is.na(districts$obs_mmi_max_dist)] <- 0
districts$obs_casualty[is.na(districts$obs_casualty)] <- 0
districts$pred_death[is.na(districts$pred_death)] <- 0
districts$pred_rate[is.na(districts$pred_rate)] <- 0
districts$pred_density[is.na(districts$pred_density)] <- 0
names(districts)
districts$obs_death[is.na(districts$obs_death)] <- 0
districts$obs_injured[is.na(districts$obs_injured)] <- 0
districts$obs_mmi_max_dist[is.na(districts$obs_mmi_max_dist)] <- 0
districts$obs_casualty[is.na(districts$obs_casualty)] <- 0
districts$pred_death[is.na(districts$pred_death)] <- 0
districts$pred_rate[is.na(districts$pred_rate)] <- 0
districts$pred_density[is.na(districts$pred_density)] <- 0
districts$index_cnt[is.na(districts$index_cnt)] <- 0
districts$index_rate[is.na(districts$index_rate)] <- 0
districts$index_density[is.na(districts$index_density)] <- 0
districts$wpredicted[is.na(districts$wpredicted)] <- 0
districts$index_roof[is.na(districts$index_roof)] <- 0
districts$index_wall[is.na(districts$index_wall)] <- 0
names(districts)
drops <- c("score_dist","score_di_1","score_di_2","score_di_3","score_di_4","score_di_5","score_di_6"
,"score_di_7","score_di_8","score_di_9","score_di10","score_di11","score_di12","score_di13")
districts[,!(names(districts) %in% drops)]
names(districts)
districts[, !(colnames(districts) %in% drops)]
d<- districts[, !(colnames(districts) %in% drops)]
names(d)
names(districts)
brks<-classIntervals(districts$obs_deaths, n=9, style="quantile")
brks<- brks$brks
plot(districts, col=colors[findInterval(districts$obs_death, brks,all.inside=TRUE)], axes=F)
install.packages('classInt')
library(classInt)
library('classInt')
setwd('/home/rebeldroid12/Desktop/swb/test/rem_spatial_research')
g = readShapeSpatial('chiphi.shp')
colors <- brewer.pal(9, "YlOrRd")
#set breaks for the 9 colors
brks<-classIntervals(g$Per.Capita, n=9, style="quantile")
brks<- brks$brks
g$Per.Capita<-as.numeric(g$Per.Capita)
colors <- brewer.pal(9, "YlOrRd")
#set breaks for the 9 colors
brks<-classIntervals(g$Per.Capita, n=9, style="quantile")
brks<- brks$brks
plot(g, col=colors[findInterval(g$Per.Capita, brks,all.inside=TRUE)], axes=F)
districts$total_pop = as.numeric(districts$score_dist)
districts$obs_death = as.numeric(districts$score_di_1)
districts$obs_injured = as.numeric(districts$score_di_2)
districts$obs_mmi_max_dist = as.numeric(districts$score_di_3)
districts$obs_casualty = as.numeric(districts$score_di_4)
districts$pred_death = as.numeric(districts$score_di_5)
districts$pred_rate = as.numeric(districts$score_di_6)
districts$pred_density = as.numeric(districts$score_di_7)
districts$index_cnt = as.numeric(districts$score_di_8)
districts$index_rate = as.numeric(districts$score_di_9)
districts$index_density = as.numeric(districts$score_di10)
districts$wpredicted = as.numeric(districts$score_di11)
districts$index_roof = as.numeric(districts$score_di12)
districts$index_wall = as.numeric(districts$score_di13)
colors <- brewer.pal(9, "YlOrRd")
brks<-classIntervals(districts$obs_deaths, n=9, style="quantile")
brks<- brks$brks
plot(districts, col=colors[findInterval(districts$obs_death, brks,all.inside=TRUE)], axes=F)
unique(districts$obs_death)
districts$obs_death[is.na(districts$obs_death)] <- 0
districts$obs_injured[is.na(districts$obs_injured)] <- 0
districts$obs_mmi_max_dist[is.na(districts$obs_mmi_max_dist)] <- 0
districts$obs_casualty[is.na(districts$obs_casualty)] <- 0
districts$pred_death[is.na(districts$pred_death)] <- 0
districts$pred_rate[is.na(districts$pred_rate)] <- 0
districts$pred_density[is.na(districts$pred_density)] <- 0
districts$index_cnt[is.na(districts$index_cnt)] <- 0
districts$index_rate[is.na(districts$index_rate)] <- 0
districts$index_density[is.na(districts$index_density)] <- 0
districts$wpredicted[is.na(districts$wpredicted)] <- 0
districts$index_roof[is.na(districts$index_roof)] <- 0
districts$index_wall[is.na(districts$index_wall)] <- 0
unique(districts$obs_death)
colors <- brewer.pal(9, "YlOrRd")
brks<-classIntervals(districts$obs_deaths, n=9, style="quantile")
brks<- brks$brks
plot(districts, col=colors[findInterval(districts$obs_death, brks,all.inside=TRUE)], axes=F)
unique(g$Per.Capita)
plot(g, col=colors[findInterval(g$Per.Capita, brks,all.inside=TRUE)], axes=F)
plot(districts, col=gray(mergedDist$death/max(mergedDist$death)))
plot(districts, col=gray(districts$death/max(districts$death)))
plot(districts, col=gray(districts$obs_death/max(districts$obs_death)))
obs_death = plot(districts, col=gray(districts$obs_death/max(districts$obs_death)))
#plot(districts, col=colors[findInterval(districts$obs_death, brks,all.inside=TRUE)], axes=F)
#print map
png(filename=obs_death.png")
plot(obs_death)
dev.off()
)
}
;
#plot prettiness!
obs_death = plot(districts, col=gray(districts$obs_death/max(districts$obs_death)))
#plot(districts, col=colors[findInterval(districts$obs_death, brks,all.inside=TRUE)], axes=F)
#print map
png(filename=obs_death.png")
plot(obs_death)
dev.off();
obs_death = plot(districts, col=gray(districts$obs_death/max(districts$obs_death)))
png(filename="./obs_death.png")
plot(obs_death)
dev.off();
getwd()
etwd('/home/rebeldroid12/Nepal_TeamViz')
setwd('/home/rebeldroid12/Nepal_TeamViz/merged_data/districts')
png(filename="./obs_death.png")
plot(obs_death)
dev.off();
plot(obs_death)
obs_death
plot(districts, col=gray(districts$obs_death/max(districts$obs_death)))
dev.copy(jpeg,filename="merged_data/districts/obs_death.jpg");
dev.off();
dev.copy(jpeg,filename="./merged_data/districts/obs_death.jpg");
dev.off();
getwd()
#print map
png(filename="./merged_data/districts/obs_death.png")
#plot prettiness!
plot(districts, col=gray(districts$obs_death/max(districts$obs_death)))
#plot(districts, col=colors[findInterval(districts$obs_death, brks,all.inside=TRUE)], axes=F)
dev.off();
getwd()
setwd('/home/rebeldroid12/Nepal_TeamViz/')
#print map
png(filename="./merged_data/districts/obs_death.png")
#plot prettiness!
plot(districts, col=gray(districts$obs_death/max(districts$obs_death)))
#plot(districts, col=colors[findInterval(districts$obs_death, brks,all.inside=TRUE)], axes=F)
dev.off();
